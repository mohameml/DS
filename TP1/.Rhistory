#see full list >knitr::opts_chunk$get()
knitr::opts_chunk$set(echo = TRUE, fig.align="center", prompt = TRUE, comment="")
rcoplogis <- function(n) {
u <- runif(n)
w <- runif(n)
v <- u / (u - 1 + 1/sqrt(w))
return(cbind(u,v))
}
res <- rcoplogis(1000)
plot(res)
res <- rcoplogis(1000)
plot(res ,pch=16)
res <- rcoplogis(1000)
plot(res ,pch=16 , lwd=1)
xy = cbind(x=c(1,2,3) , y = c(0,1,2))
xy
xy[,1]
xy[,2]
xy[,1] <= x1
x1 = c(0,0 , 0)
xy[,1] <= x1
mean(xy[,1] <= x1)
mean(xy[,1] <= x1)
x1 = c(3,0 , 0)
mean(xy[,1] <= x1)
mean(xy[,2] <= y1)
y1 = c(1 , 2 , 3)
mean(xy[,2] <= y1)
mean(xy[,1] <= x1 & xy[,2] <= y1) # le pourcentage des observat
1 & 2
?Vectorize
1/1:10
pcoplogis <- function(u,v) {
res <- 1 / (1/u + 1/v -1)
return(res)
}
grille <- cbind(1/1:10, 1/2:11)
# méthode théorique :
theo_cop <- pcoplogis(grille[,1] , grille[,2])
# méthode empirique :
simu_u_v <- rcoplogis(1000)
emp_cop <- mecdf(sim_u_v)(grille[,1] , grille[,2])
mecdf <- function(xy)
{
f <- function(x,y)
{
mean(xy[, 1] <= x & xy[, 2] <= y)
}
Vectorize(f, c("x", "y"))
}
grille <- cbind(1/1:10, 1/2:11)
# méthode théorique :
theo_cop <- pcoplogis(grille[,1] , grille[,2])
# méthode empirique :
simu_u_v <- rcoplogis(1000)
emp_cop <- mecdf(sim_u_v)(grille[,1] , grille[,2])
grille <- cbind(1/1:10, 1/2:11)
# méthode théorique :
theo_cop <- pcoplogis(grille[,1] , grille[,2])
# méthode empirique :
simu_u_v <- rcoplogis(1000)
emp_cop <- mecdf(simu_u_v)(grille[,1] , grille[,2])
# Affichage des Res :
cbind("theo"=theo_cop, "emp"=emp_cop)
m <- 100
verif <- cbind(runif(m) , runif(m))
simu <- rcoplogis(1000)
error <- function(verif , simu)
{
ptheao <- pcoplogis(grille[,1] , grille[,2])
pemp <- mecdf(uv1)(grille[,1] , grille[,2])
mean(abs(ptheao - pemp))
}
error(verif , simu)
m <- 100
verif <- cbind(runif(m) , runif(m))
simu <- rcoplogis(1000)
error <- function(verif , simu)
{
ptheao <- pcoplogis(grille[,1] , grille[,2])
pemp <- mecdf(simu)(grille[,1] , grille[,2])
mean(abs(ptheao - pemp))
}
error(verif , simu)
library(copula)
simu <- rcoplogis(1e5)
# Lambda L
fitLambda(uv1)[1,2]
library(copula)
simu <- rcoplogis(1e5)
# Lambda L
fitLambda(simu)[1,2]
# Lambda R
fitLambda(simu , lower = FALSE)[1,2]
library(copula)
simu <- rcoplogis(1e5)
# Lambda L
fitLambda(simu)[1,2]
# Lambda R
fitLambda(simu , lower = FALSE)[1,2]
library(copula)
simu <- rcoplogis(1e5)
# Lambda L
fitLambda(simu)[1,2]
# Lambda R
fitLambda(simu , lower = FALSE)[1,2]
library(copula)
simu <- rcoplogis(1e5)
# Lambda L
fitLambda(simu)[1,2]
# Lambda R
fitLambda(simu , lower = FALSE)[1,2]
library(copula)
simu <- rcoplogis(1e7)
# Lambda L
fitLambda(simu)[1,2]
library(copula)
simu <- rcoplogis(1e5)
# Lambda L
fitLambda(simu)[1,2]
# Lambda R
fitLambda(simu , lower = FALSE)[1,2]
rcop1 <- function()
{
e <- rexp(1)
ech <- rexp(2 , e)
u <- 1/(1+ech)
return(u)
}
rcop <- function(n) {
replicate(n, {
e <- rexp(1)
ech <- rexp(2, rate = e)
u <- 1 / (1 + ech)
return(u)
})
}
rcop(1)
rcop1 <- function()
{
e <- rexp(1)
ech <- rexp(2 , e)
u <- 1/(1+ech)
return(u)
}
rcop <- function(n) {
replicate(n, {
e <- rexp(1)
ech <- rexp(2, rate = e)
u <- 1 / (1 + ech)
return(u)
})
}
rcop(2)
rcop(10)
rcop <- function(n) {
results  <- replicate(n, {
e <- rexp(1)
ech <- rexp(2, rate = e)
u <- 1 / (1 + ech)
return(u)
})
res <- data.frame(u_1 = results[1, ], u_2 = results[2, ])
return(res)
}
rcop(10)
rcop <- function(n) {
results  <- replicate(n, {
e <- rexp(1)
ech <- rexp(2, rate = e)
u <- 1 / (1 + ech)
return(u)
})
res <- cbind(u_1 = results[1, ], u_2 = results[2, ])
return(res)
}
rcop(10)
rcop(10)
rcop <- function(n) {
results  <- replicate(n, {
e <- rexp(1)
ech <- rexp(2, rate = e)
u <- 1 / (1 + ech)
return(u)
})
res <- cbind(u_1 = results[1, ], u_2 = results[2, ])
return(res)
}
rcop(10)
plot(rcop(1000))
rcop <- function(n) {
results  <- replicate(n, {
e <- rexp(1)
ech <- rexp(2, rate = e)
u <- 1 / (1 + ech)
return(u)
})
res <- cbind(u = results[1, ], v = results[2, ])
return(res)
}
plot(rcop(1000) , pch=16)
grille <- cbind(1/1:10, 1/2:11)
# méthode théorique :
theo_cop <- pcoplogis(grille[,1] , grille[,2])
# méthode empirique :
simu_u_v <- rcop(1000)
emp_cop <- mecdf(simu_u_v)(grille[,1] , grille[,2])
# Affichage des Res :
cbind("theo"=theo_cop, "emp"=emp_cop)
error(grille , simu_u_v)
m <- 100
verif <- cbind(runif(m) , runif(m))
simu_u_v <- rcop(1000)
error(verif , simu_u_v)
library(copula)
n <- 1e3
uv1 <- rcoplogis(n)
C.hat <- empCopula(uv1, smoothing = "beta")
contourplot2(C.hat, FUN=dCopula, main="niveaux de densité",
col.regions=colorRampPalette( c("white", "green", "yellow", "orange", "red") )(16))
n.col <- 100
mycolpal <- colorRampPalette( c("white","green", "yellow", "orange", "red") )(n.col)
n.grid <- 26
zmat <- as.matrix(expand.grid(seq(0, 1, length=n.grid),
seq(0, 1, length=n.grid)))
zmat <- matrix(dCopula(zmat, C.hat), ncol=n.grid)
nrz <- nrow(zmat)
ncz <- ncol(zmat)
zctr <- zmat[-1, -1] + zmat[-1, -ncz] + zmat[-nrz, -1] + zmat[-nrz, -ncz]
# Recode facet z-values into color indices
facetcol <- cut(zctr, n.col)
persp(C.hat, FUN=dCopula, col=mycolpal[facetcol], n.grid=n.grid)
f_inv <- function(x)
{
res <- log(x/(1-x))
}
rcopxy <- function(n)
{
# simulation de (u,v) = (F_1(X) , F_2(Y))
uv <- rcop(n)
# simulation de X,Y
xy <- cbind(f_inv(uv[,1]) , f_inv(uv[,2]))
return(xy)
}
n = 1000
xy <- rcopxy(n)
plot(xy)
n = 1000
xy <- rcopxy(n)
plot(xy , pch=16)
n = 1000
xy <- rcopxy(n)
plot(xy , pch=16 , xlab=x , ylab=y)
n = 1000
xy <- rcopxy(n)
plot(xy , pch=16 , xlab="x" , ylab="y")
# Définition de la fonction de densité f(x, y)
f_xy <- function(x, y) {
numerator <- exp(-x) * exp(-y)
denominator <- (1 + exp(-x) + exp(-y))^3
return(numerator / denominator)
}
# Créer une grille de valeurs pour x et y
x_vals <- seq(-5, 5, length.out = 100)
y_vals <- seq(-5, 5, length.out = 100)
# Créer la grille 2D
grid <- expand.grid(x = x_vals, y = y_vals)
# Calculer la densité f(x, y) pour chaque point de la grille
grid$f_xy <- mapply(f_xy, grid$x, grid$y)
# Tracer la densité avec un graphique contour
library(ggplot2)
ggplot(grid, aes(x = x, y = y, z = f_xy)) +
geom_tile(aes(fill = f_xy), width = 0.1, height = 0.1) +
scale_fill_viridis_c() +
labs(title = "Densité f(x, y)", x = "x", y = "y", fill = "f(x, y)") +
theme_minimal()
# Définition de la fonction de densité f(x, y)
f_xy <- function(x, y) {
numerator <- exp(-x) * exp(-y)
denominator <- (1 + exp(-x) + exp(-y))^3
return(numerator / denominator)
}
# Créer une grille de valeurs pour x et y
x_vals <- seq(-5, 5, length.out = 100)
y_vals <- seq(-5, 5, length.out = 100)
# Créer la grille 2D
grid <- expand.grid(x = x_vals, y = y_vals)
# Calculer la densité f(x, y) pour chaque point de la grille
grid$f_xy <- mapply(f_xy, grid$x, grid$y)
# Tracer la densité avec un graphique contour
library(ggplot2)
ggplot(grid, aes(x = x, y = y, z = f_xy)) +
geom_tile(aes(fill = f_xy), width = 0.1, height = 0.1) +
scale_fill_viridis_c() +
labs(title = "Densité f(x, y)", x = "x", y = "y", fill = "f(x, y)") +
theme_minimal()
n = 1000
xy <- rcopxy(n)
plot(xy , pch=16 , xlab="x" , ylab="y" , main="Densite")
# Définition de la fonction de densité f(x, y)
f_xy <- function(x, y) {
a <- exp(-x) * exp(-y)
b <- (1 + exp(-x) + exp(-y))^3
return(a / b)
}
# Créer une grille de valeurs pour x et y
x_vals <- seq(-5, 5, length.out = 100)
y_vals <- seq(-5, 5, length.out = 100)
# Créer la grille 2D
grid <- expand.grid(x = x_vals, y = y_vals)
# Calculer la densité f(x, y) pour chaque point de la grille
grid$f_xy <- mapply(f_xy, grid$x, grid$y)
# Tracer la densité avec un graphique contour
library(ggplot2)
ggplot(grid, aes(x = x, y = y, z = f_xy)) +
geom_tile(aes(fill = f_xy), width = 0.1, height = 0.1) +
scale_fill_viridis_c() +
labs(title = "Densité f(x, y)", x = "x", y = "y", fill = "f(x, y)") +
theme_minimal()
